version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflowId:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflowId >>
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflowId >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflowId:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl -H "token: << parameters.workflowId >>" --request GET https://api.memstash.io/values/migration_<< parameters.workflowId >>)
            if((${SUCCESS}==1));
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ frontend-build ]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [ frontend/node_modules ]
          key: frontend-build-{{ checksum "package-lock.json" }}
          when: always

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ backend-build ]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [ backend/node_modules ]
          key: backend-build-{{ checksum "package-lock.json" }}
          when: always

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build-{{ checksum "package-lock.json" }}
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build-{{ checksum "package-lock.json" }}
      - run:
          name: Test back-end
          command: |
            cd backend
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build-{{ checksum "package-lock.json" }}
      - run:
          name: Scan front-end
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build-{{ checksum "package-lock.json" }}
      - run:
          name: Scan back-end
          command: |
            cd backend
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli:2.1.22
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udacity-cicd \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udacity-cicd \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Install tar utility
          command: yum install -y tar
      - run:
          name: Install gzip
          command: yum install -y gzip
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            ls
            aws cloudformation list-exports --query "Exports[?Name==\`udapeople-back-end-ip\`].Value" --output text >> ./.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflowId: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflowId: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: [ "7a:0a:25:91:3e:04:74:7b:80:dd:c8:6b:47:dd:8d:a2:2f:9c:02:f1", "20:d6:c2:8e:b6:04:a4:d5:12:30:28:d7:e3:43:eb:3d" ]
      #            - "20:d6:c2:8e:b6:04:a4:d5:12:30:28:d7:e3:43:eb:3d"
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            apk add --update ansible
            apk add curl
#      - run:
#          name: Make .env file in backend.
#          command: |
#            echo NODE_ENV=production > "backend/.env"
#            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
#            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
#            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
#            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
#            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
#            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
#            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
#            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
#            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
#      - persist_to_workspace:
#          root: .
#          paths:
#            - "backend/.env"
      - run:
          name: Configure server
          no_output_timeout: 30m
          command: |
            # Your code here
            ansible-playbook -i ./.circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflowId: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflowId: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - backend-build-{{ checksum "package-lock.json" }}
      - run:
          name: awscli install
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -y -qq install python3
            sudo apt-get -qq install awscli
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend

            echo NODE_ENV=production >> .env
            echo TYPEORM_CONNECTION=postgres >> .env
            echo TYPEORM_MIGRATIONS_DIR=./dist/migrations >> .env
            echo TYPEORM_ENTITIES=./dist/modules/domain/**/*.entity.js >> .env
            echo TYPEORM_MIGRATIONS=./dist/migrations/*.js >> .env
            echo TYPEORM_HOST=$TYPEORM_HOST >> .env
            echo TYPEORM_PORT=$TYPEORM_PORT >> .env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> .env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env

            npm run migrations >> migrations_dump.txt
            echo 'MIGRATION RESULT'
            echo '*****************'
            cat migrations_dump.txt
            echo '-----------------'
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            cd backend
            pwd
            sudo cat migrations_dump.txt
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl -H "Content-Type: text/plain" -H "token: migration_${CIRCLE_WORKFLOW_ID:0:7}" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
              echo migration_${CIRCLE_WORKFLOW_ID:0:7}
              echo "SUCCESS = 1"
            else
              echo $(curl -H "Content-Type: text/plain" -H "token: migration_${CIRCLE_WORKFLOW_ID:0:7}" --request PUT --data "0" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7} | grep "No migrations")
              echo "migration ID" migration_${CIRCLE_WORKFLOW_ID:0:7}
              echo "SUCCESS = 0"
            fi
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflowId: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflowId: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    docker:
    # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure

  deploy-backend:
    docker:
    # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Deploy backend
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure

  smoke-test:
    docker:
    # Lightweight Docker image
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
      - run:
          name: Backend smoke test.
          command: |
            # your code here
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure

  cloudfront-update:
    docker:
    # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure

  cleanup:
    docker:
    # Docker image here
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [ build-frontend ]
      - test-backend:
          requires: [ build-backend ]
      - scan-backend:
          requires: [ build-backend ]
      - scan-frontend:
          requires: [ build-frontend ]
      - deploy-infrastructure:
          requires: [ test-frontend, test-backend, scan-frontend, scan-backend ]
          filters:
            branches:
#              only: [ test-feature-branch ]
              only: [ new-branch ]
      - configure-infrastructure:
          requires: [ deploy-infrastructure ]
      - run-migrations:
          requires: [ configure-infrastructure ]
      - deploy-frontend:
          requires: [ run-migrations ]
      - deploy-backend:
          requires: [ run-migrations ]
      - smoke-test:
          requires: [ deploy-backend, deploy-frontend ]
      - cloudfront-update:
          requires: [ smoke-test ]
      - cleanup:
          requires: [ cloudfront-update ]
